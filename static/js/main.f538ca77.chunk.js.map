{"version":3,"sources":["firebaseDB.tsx","routes/Profile.tsx","routes/Auth.tsx","components/TweetManagement.tsx","routes/Home.tsx","components/Navigation.tsx","components/Router.tsx","components/App.tsx","index.tsx"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","authService","providerInstance","dbService","storageService","Profile","userInfo","refreshedUser","useState","displayName","newDisplayName","setNewDisplayName","getMyTweets","a","collection","where","uid","orderBy","get","tweets","console","log","docs","map","doc","data","onSubmit","e","preventDefault","updateProfile","useEffect","type","placeholder","onChange","value","target","onClick","signOut","Auth","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","name","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","required","prev","TweetManagement","edit","setEdit","props","twitter","newTweet","setNewTweet","onDelete","window","confirm","id","delete","refFromURL","attachedURL","toggleEditing","onSubmitEdit","event","update","src","style","width","height","alt","whoWroteThis","Home","userId","tweetContent","setTweetContent","setTweets","undefined","attachedFile","setAttachedFile","onSnapshot","snapshot","getTweetsFromServer","everyDoc","persist","forAddURL","fileRefference","ref","child","uuidv4","putString","response","getDownloadURL","tweetInfo","createdDate","Date","now","creatorID","add","maxLength","accept","targetImg","files","reader","FileReader","readAsDataURL","onloadend","finish","result","currentTarget","key","Navigation","to","AppRouter","isLoggedIn","exact","path","from","App","init","setInit","userObj","setUserObj","onAuthStateChanged","user","args","Boolean","currentUser","getFullYear","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f538ca77.chunk.js","sourcesContent":["import * as firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBFFfpW5QNobVSOlb340rHkljGwqRkQ3ck\",\r\n  authDomain: \"facebook-e2ff6.firebaseapp.com\",\r\n  databaseURL: \"https://facebook-e2ff6.firebaseio.com\",\r\n  projectId: \"facebook-e2ff6\",\r\n  storageBucket: \"facebook-e2ff6.appspot.com\",\r\n  messagingSenderId: \"840295614408\",\r\n  appId: \"1:840295614408:web:dc54f8128d290944ac22fd\",\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const authService = firebase.auth();\r\nexport const providerInstance = firebase.auth;\r\nexport const dbService = firebase.firestore();\r\nexport const storageService = firebase.storage();\r\n","import { AppPouterProps } from \"components/Router\";\r\nimport { authService, dbService } from \"firebaseDB\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\ninterface ProfileProps {\r\n  uid: string;\r\n  displayName?: string;\r\n  refreshedUser?: any;\r\n}\r\n\r\nfunction Profile({ userInfo, refreshedUser }: AppPouterProps) {\r\n  const [newDisplayName, setNewDisplayName] = useState(userInfo.displayName);\r\n\r\n  const onLogOut = () => {\r\n    authService.signOut();\r\n  };\r\n\r\n  const getMyTweets = async () => {\r\n    const tweets = await dbService\r\n      .collection(\"tweeter\")\r\n      .where(\"creatorID\", \"==\", userInfo.uid)\r\n      .orderBy(\"createdDate\", \"desc\")\r\n      .get();\r\n    console.log(tweets.docs.map((doc) => doc.data()));\r\n  };\r\n\r\n  const onChange = (e: any) => {\r\n    const {\r\n      target: { value },\r\n    } = e;\r\n    setNewDisplayName(value);\r\n  };\r\n\r\n  const onSubmit = async (e: any) => {\r\n    e.preventDefault();\r\n    if (userInfo.displayName !== newDisplayName) {\r\n      userInfo.updateProfile(newDisplayName!);\r\n    }\r\n    refreshedUser();\r\n  };\r\n\r\n  useEffect(() => {\r\n    getMyTweets();\r\n  });\r\n  return (\r\n    <>\r\n      <form onSubmit={onSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"display Name\"\r\n          onChange={onChange}\r\n          value={newDisplayName}\r\n        ></input>\r\n        <input type=\"submit\" value=\"update profile\" />\r\n      </form>\r\n      <button onClick={onLogOut}>Log out</button>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Profile;\r\n","import { authService, providerInstance } from \"firebaseDB\";\r\nimport React, { useState } from \"react\";\r\n\r\nfunction Auth() {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [newAccount, setNewAccount] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n  ////////////////////////////////////////////////////////////////\r\n  const onChange = (e: any) => {\r\n    const {\r\n      target: { name, value },\r\n    } = e;\r\n    if (name === \"email\") {\r\n      setEmail(value);\r\n    } else if (name === \"password\") {\r\n      setPassword(value);\r\n    }\r\n  };\r\n  const onSubmit = async (e: any) => {\r\n    e.preventDefault();\r\n    try {\r\n      let data = null;\r\n      if (newAccount) {\r\n        data = await authService.createUserWithEmailAndPassword(\r\n          email,\r\n          password\r\n        );\r\n      } else {\r\n        data = await authService.signInWithEmailAndPassword(email, password);\r\n      }\r\n      console.log(data);\r\n    } catch (error) {\r\n      setError(error.message);\r\n      console.log(error.message);\r\n    }\r\n  };\r\n\r\n  const toggleEvent = () => {\r\n    setNewAccount((prev) => !prev);\r\n  };\r\n\r\n  const onSocialClick = async (e: any) => {\r\n    const {\r\n      target: { name },\r\n    } = e;\r\n\r\n    let provider = null;\r\n\r\n    if (name === \"google\") {\r\n      provider = new providerInstance.GoogleAuthProvider();\r\n    } else if (name === \"github\") {\r\n      provider = new providerInstance.GithubAuthProvider();\r\n    }\r\n    const data = await authService.signInWithPopup(provider!);\r\n    console.log(data);\r\n  };\r\n  ////////////////////////////////////////////////////////////////\r\n  return (\r\n    <div>\r\n      <form onSubmit={onSubmit}>\r\n        <input\r\n          name=\"email\"\r\n          type=\"text\"\r\n          placeholder=\"Email\"\r\n          required\r\n          value={email}\r\n          onChange={onChange}\r\n        />\r\n        <input\r\n          name=\"password\"\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          required\r\n          value={password}\r\n          onChange={onChange}\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          value={newAccount ? \"Create your account\" : \"Log in\"}\r\n        />\r\n        {error}\r\n      </form>\r\n      <span onClick={toggleEvent}>\r\n        {newAccount ? \"Log in\" : \"Create your account\"}\r\n      </span>\r\n      <div>\r\n        <button name=\"google\" onClick={onSocialClick}>\r\n          Log in with Google\r\n        </button>\r\n        <button name=\"github\" onClick={onSocialClick}>\r\n          Log in with Github\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Auth;\r\n","import { dbService, storageService } from \"firebaseDB\";\r\nimport React, { useState } from \"react\";\r\nimport { TweetDataForm } from \"routes/Home\";\r\n\r\ninterface TweetManagementProps {\r\n  props: TweetDataForm;\r\n  whoWroteThis: boolean;\r\n}\r\n\r\nfunction TweetManagement(e: TweetManagementProps) {\r\n  const [edit, setEdit] = useState(false);\r\n  const [newTweet, setNewTweet] = useState(e.props.twitter);\r\n  const onDelete = async () => {\r\n    const confirming = window.confirm(\"are you sure?\");\r\n    if (confirming) {\r\n      await dbService.collection(\"tweeter\").doc(`${e.props.id}`).delete();\r\n      await storageService.refFromURL(e.props.attachedURL).delete();\r\n    }\r\n  };\r\n  const toggleEditing = () => setEdit((prev) => !prev);\r\n  const onSubmitEdit = async (event: any) => {\r\n    event.preventDefault();\r\n    await dbService\r\n      .collection(\"tweeter\")\r\n      .doc(`${e.props.id}`)\r\n      .update({ twitter: newTweet });\r\n\r\n    toggleEditing();\r\n  };\r\n\r\n  const onChangeEdit = (e: any) => {\r\n    const {\r\n      target: { value },\r\n    } = e;\r\n    setNewTweet(value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {edit ? (\r\n        <>\r\n          <form onSubmit={onSubmitEdit}>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"edit this\"\r\n              value={newTweet}\r\n              onChange={onChangeEdit}\r\n              required\r\n            />\r\n            <input type=\"submit\" value=\"change tweet\" />\r\n          </form>\r\n          <button onClick={toggleEditing}>return to tweet again</button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <h4>{e.props.twitter}</h4>{\" \"}\r\n          {e.props.attachedURL && (\r\n            <img\r\n              src={e.props.attachedURL}\r\n              style={{ width: \"50px\", height: \"50px\" }}\r\n              alt=\"\"\r\n            />\r\n          )}\r\n          {e.whoWroteThis && (\r\n            <>\r\n              <button onClick={onDelete}>Delete this</button>\r\n              <button onClick={toggleEditing}>Addit this</button>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TweetManagement;\r\n","import TweetManagement from \"components/TweetManagement\";\r\nimport { dbService, storageService } from \"firebaseDB\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nexport interface TweetDataForm {\r\n  id: string;\r\n  creatorID: string;\r\n  attachedURL: string;\r\n  createdDate: number;\r\n  twitter: string;\r\n}\r\n\r\nexport interface HomeProps {\r\n  userId: string;\r\n}\r\n\r\nfunction Home({ userId }: HomeProps) {\r\n  const [tweetContent, setTweetContent] = useState(\"\");\r\n  const [tweets, setTweets] = useState([] as TweetDataForm[]);\r\n  const [attachedFile, setAttachedFile] = useState(undefined);\r\n  /*  const getTweetsFromServer = async () => {\r\n    const comments = await dbService.collection(\"tweeter\").get();\r\n    comments.forEach((document) => {\r\n      const whatIsInThere = {\r\n        ...document.data(),\r\n        id: document.id,\r\n      } as TweetDataForm;\r\n      setTweets((prev: any[]) => [whatIsInThere, ...prev]);\r\n    });\r\n  }; */\r\n  useEffect(() => {\r\n    /*  getTweetsFromServer(); */\r\n\r\n    //! realtime update part\r\n    dbService.collection(\"tweeter\").onSnapshot((snapshot) => {\r\n      const getTweetsFromServer = snapshot.docs.map((everyDoc) => ({\r\n        ...(everyDoc.data() as TweetDataForm),\r\n        id: everyDoc.id,\r\n      }));\r\n      setTweets(getTweetsFromServer);\r\n    });\r\n  }, []);\r\n\r\n  const onSubmit = async (e: any) => {\r\n    e.persist();\r\n    let forAddURL = \"\";\r\n    if (attachedFile) {\r\n      const fileRefference = storageService\r\n        .ref()\r\n        .child(`${userId}/${uuidv4()}`);\r\n      const response = await fileRefference.putString(\r\n        attachedFile!,\r\n        \"data_url\"\r\n      );\r\n      forAddURL = await response.ref.getDownloadURL();\r\n    }\r\n\r\n    e.preventDefault();\r\n    /* await dbService.collection(\"tweeter\").add({\r\n      twitter: tweetContent,\r\n      createdDate: Date.now(),\r\n      creatorID: userId,\r\n    });\r\n    setTweetContent(\"\"); */\r\n\r\n    const tweetInfo = {\r\n      twitter: tweetContent,\r\n      createdDate: Date.now(),\r\n      creatorID: userId,\r\n      attachedURL: forAddURL,\r\n    };\r\n    await dbService.collection(\"tweeter\").add({ ...tweetInfo });\r\n    setTweetContent(\"\");\r\n    setAttachedFile(undefined);\r\n  };\r\n\r\n  const onChange = (e: any) => {\r\n    const {\r\n      target: { value },\r\n    } = e;\r\n    setTweetContent(value);\r\n  };\r\n\r\n  const onFileChange = (e: any) => {\r\n    const {\r\n      target: { files },\r\n    } = e;\r\n    const targetImg = files[0];\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(targetImg); //! reads the file\r\n    reader.onloadend = (finish: any) => {\r\n      const {\r\n        currentTarget: { result },\r\n      } = finish;\r\n      setAttachedFile(result);\r\n    }; //! get the result\r\n  };\r\n\r\n  const deleteImage = () => {\r\n    setAttachedFile(undefined);\r\n  };\r\n  return (\r\n    <div>\r\n      <form onSubmit={onSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"emotion\"\r\n          maxLength={120}\r\n          value={tweetContent}\r\n          onChange={onChange}\r\n        ></input>\r\n        <input type=\"file\" accept=\"image/*\" onChange={onFileChange} />\r\n        <input type=\"submit\" value=\"tweet\" />\r\n        {attachedFile && (\r\n          <div>\r\n            <img\r\n              src={attachedFile}\r\n              style={{ width: \"100px\", height: \"100px\" }}\r\n              alt=\"\"\r\n            />\r\n            <button onClick={deleteImage}>Clear Image</button>\r\n          </div>\r\n        )}\r\n      </form>\r\n\r\n      <div>\r\n        {tweets.map((e) => (\r\n          <TweetManagement\r\n            key={e.id}\r\n            props={e}\r\n            whoWroteThis={e.creatorID === userId}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import { authService } from \"firebaseDB\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { AppPouterProps } from \"./Router\";\r\n\r\nfunction Navigation({ userInfo }: AppPouterProps) {\r\n  return (\r\n    <nav>\r\n      <ul>\r\n        <li>\r\n          <Link to=\"/\">Home</Link>\r\n        </li>\r\n\r\n        <li>\r\n          <Link to=\"/profile\">{userInfo.displayName}</Link>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\r\nimport {\r\n  HashRouter as Router,\r\n  Redirect,\r\n  Route,\r\n  Switch,\r\n} from \"react-router-dom\";\r\nimport Profile from \"routes/Profile\";\r\nimport Auth from \"../routes/Auth\";\r\nimport Home from \"../routes/Home\";\r\nimport Navigation from \"./Navigation\";\r\n\r\nexport interface AppPouterProps {\r\n  isLoggedIn?: boolean;\r\n  userInfo: {\r\n    uid: string;\r\n    displayName?: string;\r\n    updateProfile: (args: string) => void;\r\n  };\r\n  refreshedUser?: any;\r\n}\r\n\r\nconst AppRouter = ({ isLoggedIn, userInfo, refreshedUser }: AppPouterProps) => {\r\n  return (\r\n    <Router>\r\n      {isLoggedIn && <Navigation userInfo={userInfo} />}\r\n      <Switch>\r\n        {isLoggedIn ? (\r\n          <>\r\n            <Route exact path=\"/\">\r\n              <Home userId={userInfo.uid} />\r\n            </Route>\r\n\r\n            <Route exact path=\"/profile\">\r\n              <Profile userInfo={userInfo} refreshedUser={refreshedUser} />\r\n            </Route>\r\n\r\n            <Redirect from=\"*\" to=\"/\" />\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Route exact path=\"/\">\r\n              <Auth />\r\n            </Route>\r\n            <Redirect from=\"*\" to=\"/\" />\r\n          </>\r\n        )}\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default AppRouter;\r\n","import React, { useState, useEffect } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"firebaseDB\";\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  /*  const [isLoggedIn, setIsLoggedIn] = useState(false); */\n  const [userObj, setUserObj] = useState(null as any);\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        /*       setIsLoggedIn(true); */\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args: string) =>\n            user.updateProfile({ displayName: args }),\n        });\n      } else {\n        /*    setIsLoggedIn(false); */\n      }\n      setInit(true);\n    });\n  }, []);\n\n  const refreshUser = () => {\n    setUserObj(authService.currentUser);\n    console.log(authService.currentUser);\n  };\n\n  return (\n    <>\n      {init ? (\n        <AppRouter\n          isLoggedIn={Boolean(userObj)}\n          userInfo={userObj}\n          refreshedUser={refreshUser}\n        />\n      ) : (\n        \"plaese wait\"\n      )}\n      <footer>@copyright:brr {new Date().getFullYear()} twitter clone</footer>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}